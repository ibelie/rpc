// Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
// Use of this source code is governed by The MIT License
// that can be found in the LICENSE file.

package rpc

import (
	"bytes"
	"fmt"
	"path"
	"strings"

	"io/ioutil"

	"github.com/ibelie/rpc/typescript"
	"github.com/ibelie/tygo"
)

func Typescript(identName string, tsOut string, inputs []string) (entities []*Entity) {
	pkg := typescript.Extract(inputs)

	components := make(map[string]*Component)
	for _, o := range pkg.Objects {
		if len(o.Parents) != 1 || o.Parents[0] == nil || o.Parents[0].Simple != "ibelie.rpc.Component" {
			continue
		}
		components[o.Name] = &Component{Name: o.Name}
	}

	var behaviors []*Behavior
	for _, o := range pkg.Objects {
		if len(o.Parents) != 1 || o.Parents[0] == nil || o.Parents[0].Simple != "ibelie.rpc.Behavior" {
			continue
		}

		behavior := &Behavior{Name: o.Name, Module: o.Module}
		for _, f := range o.Fields {
			if f.Type == nil || !strings.HasSuffix(f.Type.Simple, "."+f.Name) {
				continue
			}

			component, ok := components[f.Name]
			if !ok {
				component = &Component{Name: f.Name}
				components[f.Name] = component
			}
			component.Path = strings.Replace(f.Type.Simple[:len(f.Type.Simple)-len(f.Name)-1], ".", "/", -1)
			behavior.Components = append(behavior.Components, component)
		}

		for _, m := range o.Methods {
			behavior.Methods = append(behavior.Methods, m.Name)
		}

		behaviors = append(behaviors, behavior)
	}

	for _, o := range pkg.Objects {
		if len(o.Parents) != 1 || o.Parents[0] == nil || o.Parents[0].Simple != "ibelie.rpc.Entity" {
			continue
		}

		entity := &Entity{Name: o.Name}
		for _, f := range o.Fields {
			if f.Type == nil || !strings.HasSuffix(f.Type.Simple, "."+f.Name) {
				continue
			}

			component, ok := components[f.Name]
			if !ok {
				component = &Component{Name: f.Name}
				components[f.Name] = component
			}
			component.Path = strings.Replace(f.Type.Simple[:len(f.Type.Simple)-len(f.Name)-1], ".", "/", -1)
			entity.Components = append(entity.Components, component)
		}

		for _, b := range behaviors {
			hasBehavior := true
			for _, bc := range b.Components {
				hasComponent := false
				for _, ec := range entity.Components {
					if bc == ec {
						hasComponent = true
						break
					}
				}
				if !hasComponent {
					hasBehavior = false
					break
				}
			}
			if hasBehavior {
				entity.Behaviors = append(entity.Behaviors, b)
				b.Entities = append(b.Entities, entity.Name)
			}
		}

		entities = append(entities, entity)
	}

	types := resolveEntities(entities)
	tygo.EXTENS_PKG = map[string]string{"Entity": "ibelie.rpc"}
	tygo.Typescript(tsOut, "types", "", types, PROP_PRE)
	injectJavascript(identName, tsOut, entities, behaviors)
	injectTypescript(tsOut, entities, types, behaviors)
	tygo.EXTENS_PKG = nil
	return entities
}

func injectTypescript(dir string, entities []*Entity, types []tygo.Type, behaviors []*Behavior) {
	var buffer bytes.Buffer
	var methods []string
	methodsMap := make(map[string]bool)
	tygo.TS_CUR_MODULE = "ibelie.rpc"
	tygo.TS_OBJECTS = tygo.ObjectMap(types, true)
	for _, e := range entities {
		for _, c := range e.Components {
			if c.Protocol == nil {
				continue
			}
			for _, m := range c.Protocol.Methods {
				if ok, exist := methodsMap[m.Name]; exist && ok {
					continue
				} else if len(m.Results) > 0 {
					continue
				}
				var params []string
				for i, p := range m.Params {
					params = append(params, fmt.Sprintf("a%d: %s", i, p.Typescript()))
				}
				methods = append(methods, fmt.Sprintf(`
		%s(%s): void;`, m.Name, strings.Join(params, ", ")))
				methodsMap[m.Name] = true
			}
		}
	}
	tygo.TS_OBJECTS = nil
	tygo.TS_CUR_MODULE = ""

	var bMethods []string
	bMethodsMap := make(map[string]bool)
	for _, b := range behaviors {
		for _, m := range b.Methods {
			if ok, exist := bMethodsMap[m]; exist && ok {
				continue
			}
			bMethods = append(bMethods, fmt.Sprintf(`
		%s(...args: any[]): void;`, m))
			bMethodsMap[m] = true
		}
	}

	buffer.Write([]byte(fmt.Sprintf(`// Generated by ibelie-rpc.  DO NOT EDIT!

declare module ibelie.rpc {
	interface Entity {
		__class__: string;
		isAwake: boolean;
		Awake(entity: Entity): any;
		Drop(entity: Entity): any;
		ByteSize(): number;
		Serialize(): Uint8Array;
		Deserialize(data: Uint8Array): void;%s
	}

	interface Behavior extends Entity {}

	class Connection {
		global: any;
		socket: WebSocket;
		entities: {[index: string]: Entity};
		constructor(url: string, global?: any);
		disconnect(): void;%s
	}
}
`, strings.Join(methods, ""), strings.Join(bMethods, ""))))

	ioutil.WriteFile(path.Join(dir, "rpc.d.ts"), buffer.Bytes(), 0666)
}
