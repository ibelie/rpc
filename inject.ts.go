// Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
// Use of this source code is governed by The MIT License
// that can be found in the LICENSE file.

package rpc

import (
	"bytes"
	"fmt"
	"log"
	"path"
	"regexp"
	"strings"

	"io/ioutil"
)

func Typescript(input string, tsOut string, goOut string) {
	text, err := ioutil.ReadFile(input)
	if err != nil {
		log.Fatalf("[RPC][Typescript] Cannot read file:\n>>>>%v", err)
		return
	}

	componentReg := regexp.MustCompile(`([_\d\w]+)\s*:\s*([\._\d\w]+)\s*;`)
	entityReg := regexp.MustCompile(`class\s+([_\d\w]+)\s+extends\s+ibelie.rpc.Entity\s*{`)
	entityText := entityReg.Split(string(text), -1)
	entityMap := make(map[string]map[string][]string)
	for i, e := range entityReg.FindAllStringSubmatch(string(text), -1) {
		entityMap[e[1]] = make(map[string][]string)
		for _, c := range componentReg.FindAllStringSubmatch(entityText[i+1], -1) {
			if !strings.HasSuffix(c[2], c[1]) {
				continue
			}
			pkg := strings.Replace(c[2][:len(c[2])-len(c[1])-1], ".", "/", -1)
			entityMap[e[1]][pkg] = append(entityMap[e[1]][pkg], c[1])
		}
	}
	entities := getEntities(entityMap)
	injectJavascript(tsOut, entities)
	injectTypescript(tsOut, entities)
}

func injectTypescript(dir string, entities []*Entity) {
	var buffer bytes.Buffer
	var methods []string

	buffer.Write([]byte(fmt.Sprintf(`// Generated by ibelie-rpc.  DO NOT EDIT!

declare module ibelie.rpc {
	class Entity {
		isAwake: boolean;
		Awake(): void;
		Sleep(): void;%s
	}

	class Component {
		Entity: Entity;
		constructor(entity: Entity);
	}
}
`, strings.Join(methods, ""))))

	ioutil.WriteFile(path.Join(dir, "rpc.d.ts"), buffer.Bytes(), 0666)
}
