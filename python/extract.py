#-*- coding: utf-8 -*-
# Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
# Use of this source code is governed by The MIT License
# that can be found in the LICENSE file.

def _compareWrite(path, content):
	import os
	import codecs
	if os.path.isfile(path):
		with codecs.open(path, 'r', 'utf-8') as f:
			if f.read() == content:
				return
	with codecs.open(path, 'w', 'utf-8') as f:
		f.write(content)


def extract(path, proto_file, *ignore):
	import os
	import sys
	import imp
	import codecs
	from microserver.classes import MetaEntity, Entity, MetaComponent, Component

	path = path.replace('\\', '/').replace('//', '/')
	if os.path.isfile(proto_file):
		with codecs.open(proto_file, 'r', 'utf-8') as f:
			proto = imp.new_module('microserver.proto')
			proto.__package__ = 'microserver'
			try:
				exec str(f.read()) in proto.__dict__
			except:
				proto.timestamps = {}
	else:
		class _Proto(object): pass
		proto = _Proto()
		proto.timestamps = {}

	def _scanScripts(sub):
		for i in os.listdir('%s/%s' % (path, sub)):
			sys.stdout.write('.')
			sys.stdout.flush()
			p = '%s/%s' % (sub, i) if sub else i
			fp = '%s/%s' % (path, p)
			if p in ignore or p[:-1] in ignore:
				continue
			elif os.path.isdir(fp):
				_scanScripts(p)
			elif fp in proto.timestamps and str(os.stat(fp).st_mtime) == proto.timestamps[fp]:
				continue
			elif i.endswith(('.py', '.pyc')):
				n = i.rpartition('.')[0]
				if not n.replace('_', '').isalnum() or n == '__init__' or (i.endswith('.pyc') and os.path.isfile(fp[:-1])) or \
					(sub and not os.path.isfile('%s/%s/__init__.py' % (path, sub)) and not os.path.isfile('%s/%s/__init__.pyc' % (path, sub))):
					continue
				proto.timestamps[fp] = str(os.stat(fp).st_mtime)
				m = n if not sub else '%s.%s' % (sub.replace('/', '.'), n)
				print '\n[Microserver] Incremental proto:', m
				__import__(m)

	if os.path.isfile(path) and path.endswith('.py'):
		with codecs.open(path, 'r', 'utf-8') as f:
			exec str(f.read()) in {}
		proto.timestamps[path] = str(os.stat(path).st_mtime)
	elif os.path.isdir(path):
		_scanScripts('')

	for n, c in MetaEntity.Entities.iteritems():
		setattr(proto, n, c)
	for n, c in MetaComponent.Components.iteritems():
		setattr(proto, n, c)

	types = []
	entities = {}
	components = {}
	virtualModules = set()
	for n in dir(proto):
		c = getattr(proto, n)
		if isinstance(c, Component):
			m = c.__module__.split('.')[0]
			if m not in virtualModules:
				types.append("""
%s = microserver.VirtualModule()""" % m)
				virtualModules.add(m)
			types.append("""
%s.%s = type('%s', (microserver.Component, ), {
	'____virtual__' = True,
	'__module__' = '%s',%s
}
""" % (c.__module__, n, n, c.__module__, ''))
			components[name] = {}

	for n in dir(proto):
		c = getattr(proto, n)
		if isinstance(c, Entity):
			types.append("""
class %s(microserver.Entity):
	____virtual__ = True%s
""" % (n, ''.join(["""
	%s = microserver.Component(%s.%s, '%s')""" % (k, v.klass.__module__, v.klass.__name__, v.path) for k, v in c.____components__.iteritems()])))
			entities[n] = {'Components': {k: components[k] for k in c.____components__}}

	_compareWrite(proto_file, MICROSERVER_PROTO__ % ('\n\t'.join(['\'%s\': \'%s\',' % (p, t) for p, t in sorted(proto.timestamps.iteritems())]), ''.join(types)))

	print repr(entities)


MICROSERVER_PROTO__ = ur"""#-*- coding: utf-8 -*-
# Generated by ibelie-rpc.  DO NOT EDIT!

import microserver

timestamps = {
	%s
}
%s
"""


if __name__ == '__main__':
	import sys
	extract(*sys.argv[1:])
