#-*- coding: utf-8 -*-
# Copyright 2017 - 2018 ibelie, Chen Jie, Joungtao. All rights reserved.
# Use of this source code is governed by The MIT License
# that can be found in the LICENSE file.

def _compareWrite(path, content):
	import os
	import codecs
	if os.path.isfile(path):
		with codecs.open(path, 'r', 'utf-8') as f:
			if f.read() == content:
				return
	with codecs.open(path, 'w', 'utf-8') as f:
		f.write(content)


def extract(path, proto_file, *ignore):
	import os
	import imp
	import codecs
	from microserver import MetaEntity, Entity, MetaComponent, Component

	path = path.replace('\\', '/').replace('//', '/')
	if os.path.isfile(proto_file):
		with codecs.open(proto_file, 'r', 'utf-8') as f:
			proto = imp.new_module('microserver.proto')
			proto.__package__ = 'microserver'
			try:
				exec str(f.read()) in proto.__dict__
			except:
				proto.timestamps = {}
	else:
		class _Proto(object): pass
		proto = _Proto()
		proto.timestamps = {}

	def _componentName(c):
		return '%s_%s' % (c.__module__.replace('.', '_'), c.__name__)

	def _scanScripts(sub):
		for i in os.listdir('%s/%s' % (path, sub)):
			# sys.stdout.write('.')
			# sys.stdout.flush()
			p = '%s/%s' % (sub, i) if sub else i
			fp = '%s/%s' % (path, p)
			if p in ignore or p[:-1] in ignore:
				continue
			elif os.path.isdir(fp):
				_scanScripts(p)
			elif fp in proto.timestamps and str(os.stat(fp).st_mtime) == proto.timestamps[fp]:
				continue
			elif i.endswith(('.py', '.pyc')):
				n = i.rpartition('.')[0]
				if not n.replace('_', '').isalnum() or n == '__init__' or (i.endswith('.pyc') and os.path.isfile(fp[:-1])) or \
					(sub and not os.path.isfile('%s/%s/__init__.py' % (path, sub)) and not os.path.isfile('%s/%s/__init__.pyc' % (path, sub))):
					continue
				proto.timestamps[fp] = str(os.stat(fp).st_mtime)
				m = n if not sub else '%s.%s' % (sub.replace('/', '.'), n)
				__import__(m)
				# print '\n[Microserver] Incremental proto:', m

	if os.path.isfile(path) and path.endswith('.py'):
		with codecs.open(path, 'r', 'utf-8') as f:
			exec str(f.read()) in {}
		proto.timestamps[path] = str(os.stat(path).st_mtime)
	elif os.path.isdir(path):
		_scanScripts('')

	for n, c in MetaEntity.Entities.iteritems():
		setattr(proto, n, c)
	for c in MetaComponent.Components.itervalues():
		setattr(proto, _componentName(c), c)

	codes = []
	types = {'Components': {}, 'Entities': []}
	for n in sorted(dir(proto)):
		c = getattr(proto, n)
		if isinstance(c, type) and issubclass(c, Component):
			codes.append("""
%s = type('%s', (microserver.Component, ), dict(
	____virtual__ = True,
	____package__ = '%s',
	__module__ = '%s',%s
))
""" % (n, c.__name__, c.____package__, c.__module__, ''.join(["""
	%s = microserver.Property(lambda self, *args: None),""" % a for a in sorted(c.____properties__)] + ["""
	%s = microserver.Message(lambda self, *args: None),""" % a for a in sorted(c.____messages__)])))
			types['Components'][n] = {
				'Name': c.__name__,
				'Package': c.____package__,
				'Properties': c.____properties__.keys(),
				'Messages': c.____messages__.keys(),
			}

	for n in sorted(dir(proto)):
		c = getattr(proto, n)
		if isinstance(c, type) and issubclass(c, Entity):
			sortedComponents = sorted(c.____components__.iteritems(), key = lambda (k, v): k)
			codes.append("""
class %s(microserver.Entity):
	____virtual__ = True%s
""" % (n, ''.join(["""
	%s = %s""" % (k, _componentName(v)) for k, v in sortedComponents])))
			types['Entities'].append({'Name': n, 'Components': [_componentName(v)
				for _, v in sortedComponents]})

	_compareWrite(proto_file, MICROSERVER_PROTO__ % ('\n\t'.join(['\'%s\': \'%s\',' % (p, t)
		for p, t in sorted(proto.timestamps.iteritems())]), ''.join(codes)))

	print repr(types).replace("'", '"')


MICROSERVER_PROTO__ = ur"""#-*- coding: utf-8 -*-
# Generated by ibelie-rpc.  DO NOT EDIT!

import microserver

timestamps = {
	%s
}
%s
"""


if __name__ == '__main__':
	import sys
	extract(*sys.argv[1:])
