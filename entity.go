// Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
// Use of this source code is governed by The MIT License
// that can be found in the LICENSE file.

package rpc

import (
	"bytes"
	"fmt"
	"sort"
	"strings"

	"io/ioutil"

	"github.com/ibelie/tygo"
)

var (
	ENTITY_PKG = map[string]string{
		"github.com/ibelie/ruid": "",
		"github.com/ibelie/tygo": "",
	}
)

const (
	SERVER_CODE = `
type IServer interface {
	EntityCreate(ruid.RUID, ruid.RUID, string) error
	EntityByteSize(ruid.RUID, ruid.RUID, string) int
	EntitySerialize(ruid.RUID, ruid.RUID, string, *tygo.ProtoBuf)
	EntityDeserialize(*tygo.ProtoBuf) (ruid.RUID, ruid.RUID, string, error)
	Distribute(ruid.RUID, ruid.RUID, string, string, []byte, chan<- []byte) error
	Procedure(ruid.RUID, ruid.RUID, string, string, []byte) ([]byte, error)
}

var Server IServer
`
	ENTITY_CODE = `
type Entity struct {
	tygo.Tygo
	ruid.RUID
	Key  ruid.RUID
	Type string
}

func (e *Entity) Create() error {
	return Server.EntityCreate(e.RUID, e.Key, e.Type)
}

func (e *Entity) ByteSize() (size int) {
	if e != nil {
		size = Server.EntityByteSize(e.RUID, e.Key, e.Type)
		e.SetCachedSize(size)
	}
	return
}

func (e *Entity) Serialize(output *tygo.ProtoBuf) {
	if e != nil {
		Server.EntitySerialize(e.RUID, e.Key, e.Type, output)
	}
}

func (e *Entity) Deserialize(input *tygo.ProtoBuf) (err error) {
	e.RUID, e.Key, e.Type, err = Server.EntityDeserialize(input)
	return
}
`
)

func Entity(path string, types []tygo.Type) {
	pkgname, depends := Extract(path)
	pkgs := ENTITY_PKG
	var head bytes.Buffer
	var body bytes.Buffer
	head.Write([]byte(fmt.Sprintf(`// Generated by ibelie-rpc.  DO NOT EDIT!

package %s
`, pkgname)))
	body.Write([]byte(`
`))
	body.Write([]byte(SERVER_CODE))
	body.Write([]byte(ENTITY_CODE))

	var services []*tygo.Object
	for _, t := range types {
		if object, ok := isService(t); ok {
			services = append(services, object)
		}
	}

	for _, depend := range depends {
		types = tygo.Extract(depend.Path, nil)
		for _, t := range types {
			for _, s := range depend.Services {
				if object, ok := isService(t); ok {
					if s == object.Name {
						services = append(services, object)
						srv_s, srv_p := injectServiceCommon(object, "")
						body.Write([]byte(srv_s))
						pkgs = update(pkgs, srv_p)
					}
				}
			}
		}
	}

	init_s, init_p := entityInitialize(services)
	body.Write([]byte(init_s))
	pkgs = update(pkgs, init_p)

	methodRecord := make(map[string]bool)
	for _, s := range services {
		for _, m := range s.Methods {
			if ok, exist := methodRecord[m.Name]; exist && ok {
				continue
			} else if len(m.Results) > 1 {
				continue
			}
			method_s, method_p := entityDistribute(s, m)
			body.Write([]byte(method_s))
			pkgs = update(pkgs, method_p)
			methodRecord[m.Name] = true
		}
	}

	var sortedPkg []string
	for path, _ := range pkgs {
		sortedPkg = append(sortedPkg, path)
	}
	sort.Strings(sortedPkg)
	for _, path := range sortedPkg {
		head.Write([]byte(fmt.Sprintf(`
import %s"%s"`, pkgs[path], path)))
	}

	head.Write(body.Bytes())
	ioutil.WriteFile(SRC_PATH+path+"/entity.rpc.go", head.Bytes(), 0666)
}

func entityInitialize(services []*tygo.Object) (string, map[string]string) {
	return fmt.Sprintf(`
func InitializeServer(server IServer) {
	if Server != nil {
		return
	}
	Server = server%s
}
`, ""), nil
}

func entityDistribute(service *tygo.Object, method *tygo.Method) (string, map[string]string) {
	var pkgs map[string]string
	var param string
	var params_list []string
	var params_declare []string
	for i, p := range method.Params {
		param_s, param_p := p.Go()
		pkgs = update(pkgs, param_p)
		params_list = append(params_list, fmt.Sprintf("p%d", i))
		params_declare = append(params_declare, fmt.Sprintf("p%d %s", i, param_s))
	}

	if len(params_list) > 0 {
		param = fmt.Sprintf("(*%sDelegate)(nil).Serialize%sParam(%s)",
			service.Name, method.Name, strings.Join(params_list, ", "))
	} else {
		param = "nil"
	}

	var result string
	if len(method.Results) == 1 {
		result_s, result_p := method.Results[0].Go()
		pkgs = update(pkgs, result_p)
		params_declare = append(params_declare, fmt.Sprintf("rChan chan<- %s", result_s))
		result = fmt.Sprintf(`
	if rChan != nil {
		var err error
		resultChan := make(chan []byte)
		go func() {
			if err = Server.Distribute(e.RUID, e.Key, e.Type, "%s", %s, resultChan); err == nil {
				for _, result := range resultChan {
					var r %s
					r, err = (*%sDelegate)(nil).Deserialize%sResult(result)
					rChan <- r
				}
			}
			close(rChan)
		}()
		return err
	} else {
		return Server.Distribute(e.RUID, e.Key, e.Type, "%s", %s, nil)
	}`, method.Name, param, result_s, service.Name, method.Name, method.Name, param)
	} else {
		result = fmt.Sprintf(`
	return Server.Distribute(e.RUID, e.Key, e.Type, "%s", %s, nil)`, method.Name, param)
	}

	return fmt.Sprintf(`
func (e *Entity) %s(%s) error {%s
}
`, method.Name, strings.Join(params_declare, ", "), result), pkgs
}
