// Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
// Use of this source code is governed by The MIT License
// that can be found in the LICENSE file.

package rpc

import (
	"bytes"
	"fmt"
	"path"
	"strings"

	"io/ioutil"

	"github.com/ibelie/rpc/python"
	"github.com/ibelie/tygo"
)

func Python(identName string, input string, pyOut string, ignore []string) (entities []*Entity) {
	pkg := python.Extract(input, pyOut, ignore)
	components := make(map[string]*Component)
	for n, c := range pkg.Components {
		components[n] = &Component{
			Name:    c.Name,
			Path:    c.Package,
			Methods: c.Messages,
		}
	}
	for _, e := range pkg.Entities {
		entity := &Entity{Name: e.Name}
		for _, c := range e.Components {
			if component, ok := components[c]; ok {
				entity.Components = append(entity.Components, component)
			}
		}
		entities = append(entities, entity)
	}

	types := resolveEntities(entities)
	tygo.Python(pyOut, "types", types, PROP_PRE)
	tygo.Typyd(pyOut, "_typy", types, PROP_PRE)
	injectPython(pyOut, entities)
	return entities
}

func injectPython(dir string, entities []*Entity) {
	var buffer bytes.Buffer
	var types []string

	buffer.Write([]byte(fmt.Sprintf(`#-*- coding: utf-8 -*-
# Generated by ibelie-rpc.  DO NOT EDIT!

import typy

%s
`, strings.Join(types, ""))))

	ioutil.WriteFile(path.Join(dir, "proto.py"), buffer.Bytes(), 0666)
}
