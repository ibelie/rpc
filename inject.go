// Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
// Use of this source code is governed by The MIT License
// that can be found in the LICENSE file.

package rpc

import (
	"bytes"
	"fmt"
	"os"
	"sort"
	"strings"

	"io/ioutil"

	"github.com/ibelie/tygo"
)

func Inject(path string, filename string, pkgname string, types []tygo.Type) {
	var services []*tygo.Object
	for _, t := range types {
		if object, ok := isService(t); ok {
			services = append(services, object)
			object.Parent.Object = &tygo.Object{
				Name:   "Entity",
				Parent: &tygo.InstanceType{PkgName: "tygo", PkgPath: tygo.TYGO_PATH, Name: "Tygo"},
			}
		}
	}
	tygo.Inject(path, filename, pkgname, types)
	injectfile := SRC_PATH + path + "/" + strings.Replace(filename, ".go", ".rpc.go", 1)
	if len(services) == 0 {
		os.Remove(injectfile)
		return
	}

	var head bytes.Buffer
	var body bytes.Buffer
	head.Write([]byte(fmt.Sprintf(`// Generated by ibelie-rpc.  DO NOT EDIT!

package %s
`, pkgname)))
	body.Write([]byte(`
`))

	var pkgs map[string]string
	for _, service := range services {
		srv_s, srv_p := injectService(service, true)
		body.Write([]byte(srv_s))
		pkgs = update(pkgs, srv_p)
	}

	var sortedPkg []string
	for path, _ := range pkgs {
		sortedPkg = append(sortedPkg, path)
	}
	sort.Strings(sortedPkg)
	for _, path := range sortedPkg {
		head.Write([]byte(fmt.Sprintf(`
import %s"%s"`, pkgs[path], path)))
	}

	head.Write(body.Bytes())
	ioutil.WriteFile(injectfile, head.Bytes(), 0666)
}

func injectService(service *tygo.Object, hasLocal bool) (string, map[string]string) {
	var pkgs map[string]string
	var methods []string
	for _, method := range service.Methods {
		param_s, param_p := tygo.TypeListSerialize(service.Name+"Delegate", method.Name, "param", method.Params)
		result_s, result_p := tygo.TypeListDeserialize(service.Name+"Delegate", method.Name, "result", method.Params)
		pkgs = update(pkgs, param_p)
		pkgs = update(pkgs, result_p)
		methods = append(methods, param_s)
		methods = append(methods, result_s)
	}

	return fmt.Sprintf(`
type %sDelegate Entity

func (e *Entity) %s() *%sDelegate {
	return (*%sDelegate)(e)
}
%s`, service.Name, service.Name, service.Name, service.Name, strings.Join(methods, "")), pkgs
}
