// Copyright 2017 ibelie, Chen Jie, Joungtao. All rights reserved.
// Use of this source code is governed by The MIT License
// that can be found in the LICENSE file.

package rpc

import (
	"bytes"
	"fmt"
	"os"
	"strings"

	"io/ioutil"

	"github.com/ibelie/tygo"
)

func Inject(path string, filename string, pkgname string, types []tygo.Type) {
	for _, t := range types {
		if object, ok := t.(*tygo.Object); ok && object.Parent.Name == "Entity" {
			object.Parent.Object = &tygo.Object{
				Name:   "Entity",
				Parent: &tygo.InstanceType{PkgName: "tygo", PkgPath: tygo.TYGO_PATH, Name: "Tygo"},
				Fields: []*tygo.Field{&tygo.Field{}},
			}
		}
	}
	tygo.Inject(path, filename, pkgname, types)
	injectfile := SRC_PATH + path + "/" + strings.Replace(filename, ".go", ".rpc.go", 1)
	if types == nil {
		os.Remove(injectfile)
		return
	}

	var head bytes.Buffer
	var body bytes.Buffer
	head.Write([]byte(fmt.Sprintf(`// Generated by ibelie-rpc.  DO NOT EDIT!

package %s
`, pkgname)))
	body.Write([]byte(`
`))

	head.Write(body.Bytes())
	ioutil.WriteFile(injectfile, head.Bytes(), 0666)
}
